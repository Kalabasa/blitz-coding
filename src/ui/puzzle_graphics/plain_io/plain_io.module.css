@value easeOut from "~ui/styles/animation.module.css";
@value expectedColor from "~ui/styles/colors.module.css";
@value failureColor from "~ui/styles/colors.module.css";
@value puzzleGraphicsColor from "~ui/styles/colors.module.css";

@value emptyResult from "~ui/puzzle_graphics/graphics.module.css";
@value key from "~ui/puzzle_graphics/graphics.module.css";
@value value from "~ui/puzzle_graphics/graphics.module.css";

.container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: auto auto;
  grid-template-areas:
    "input expectation"
    "result result";
  align-content: center;
  padding: 12px;
  background: puzzleGraphicsColor;
  animation: containerEntrance 0.6s calc(0.03s * var(--caseIndex, 0)) easeOut
    backwards;
}

@keyframes containerEntrance {
  from {
    transform: translateY(-100%);
  }
}

.inputSection {
  grid-area: input;
  padding: 12px;
}

.expectationSection {
  grid-area: expectation;
  padding: 12px;
}

.resultSection {
  position: relative;
  grid-area: result;
  padding: 12px;
  animation: resultEntrance 0.1s calc(0.2s + 0.03s * var(--caseIndex, 0)) linear
    backwards;
}

@keyframes resultEntrance {
  from {
    opacity: 0;
  }
}

.inputLine {
  display: flex;
}

.inputName {
  composes: key;
  flex: 1 0 25%;
}

.inputValue {
  composes: value;
  flex: 1 1 75%;
}

.funcName {
  composes: key;
}

.expected {
  composes: value;
}
.failure .expected {
  color: expectedColor;
  animation: textColorReveal 0.2s 1.2s linear backwards;
}

.resultPrefix {
  composes: key;
}

.result {
  composes: value;
  display: inline-block;
}
.failure .result {
  color: failureColor;
  animation: textColorReveal 0.2s 1.2s linear backwards,
    shake 0.003s calc(1.1s + 0.06s * var(--caseIndex, 0)) linear
      alternate-reverse 120;
}

@keyframes textColorReveal {
  from {
    color: inherit;
  }
}

@keyframes shake {
  0% {
    transform: translateX(-2px);
  }
  48% {
    transform: translateX(-2px);
  }
  52% {
    transform: translateX(2px);
  }
  100% {
    transform: translateX(2px);
  }
}

.mark {
  position: absolute;
  right: 0;
  bottom: 0;
  animation-delay: calc(0.6s + 0.03s * var(--caseIndex, 0));
}
